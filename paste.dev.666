<?php
// detect_backdoors.php
// Usage: place in server (outside public_html recommended), open in browser.
// Default root is tailored to your environment; change as needed.

set_time_limit(0);
ini_set('display_errors', 0);

############################
# Config
############################
$DEFAULT_ROOT = '/home/u384311178/domains/colonyinsoles.com/public_html';
$ALLOWED_BASE = null; // optional: set to a parent dir to restrict scanning further, or null to allow any path
$MAX_READ_BYTES = 65536; // how many bytes to read when scanning file content

############################
# Helpers
############################
function h($s){ return htmlspecialchars($s, ENT_QUOTES|ENT_SUBSTITUTE, 'UTF-8'); }
function fmtPerm($mode){
    return substr(sprintf('%o', $mode), -4);
}
function ownerName($path){
    $uid = @fileowner($path);
    if ($uid === false) return '-';
    $user = posix_getpwuid($uid);
    return $user ? $user['name'] : $uid;
}
function safeBasename($p){ return basename($p); }

############################
# Acquire input
############################
$root = isset($_GET['root']) && strlen($_GET['root']) ? $_GET['root'] : $DEFAULT_ROOT;
$root = rtrim($root, "/");
$action = isset($_POST['action']) ? $_POST['action'] : (isset($_GET['action']) ? $_GET['action'] : 'scan');

# very light sanitization; ensure absolute path
if (!preg_match('#^(/|[A-Za-z]:\\\\)#', $root)) {
    $root = $DEFAULT_ROOT;
}

if ($ALLOWED_BASE !== null) {
    // ensure root is within allowed base
    if (strpos(realpath($root), realpath($ALLOWED_BASE)) !== 0) {
        die("Root path not allowed.");
    }
}

############################
# Patterns to detect
############################
$patterns = [
    'numeric_php' => '/\/[0-9]{1,12}\.php$/', // numeric filename like 12345.php
    'hex2bin'     => '/hex2bin\s*\(/i',
    'rawgithub'   => '/raw\.githubusercontent\.com/i',
    'eval_curl'   => '/eval\W.*curl_exec|curl_exec\W.*eval|eval\W.*file_get_contents|file_get_contents\W.*eval/i',
    'suspicious_functions' => '/\b(base64_decode|gzinflate|shell_exec|system|passthru|exec)\s*\(/i',
    'htaccess_order' => '/Order\s+allow,deny/i'
];

############################
# Scanning function
############################
function scanDirectory($root, $patterns, $maxReadBytes) {
    $results = [];
    if (!is_dir($root)) return ['error'=>"Root is not a directory: $root"];
    $it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($root, FilesystemIterator::SKIP_DOTS));
    foreach ($it as $fileinfo) {
        // skip unreadable
        $path = $fileinfo->getPathname();

        // Skip very large files for content checks to save time
        $isFile = $fileinfo->isFile();
        $rel = $path;

        $matches = [];

        // 1) name pattern numeric.php
        if (preg_match($patterns['numeric_php'], $path)) {
            $matches[] = 'numeric_php';
        }

        // 2) perms 0444
        $perm = @fileperms($path);
        if ($perm !== false && (sprintf('%o', $perm & 0777) === '444')) {
            $matches[] = 'perm_0444';
        }

        // 3) .htaccess check (content)
        if ($isFile && safeBasename($path) === '.htaccess') {
            $contents = @file_get_contents($path, false, null, 0, $maxReadBytes);
            if ($contents !== false && preg_match($patterns['htaccess_order'], $contents)) {
                $matches[] = 'htaccess_order';
            }
        }

        // 4) content checks for suspicious functions/hex/rawgithub/eval+curl
        if ($isFile && $fileinfo->getSize() > 0 && $fileinfo->getSize() < 5*1024*1024) { // skip >5MB files
            $contents = @file_get_contents($path, false, null, 0, $maxReadBytes);
            if ($contents !== false) {
                if (preg_match($patterns['hex2bin'], $contents)) $matches[] = 'hex2bin';
                if (preg_match($patterns['rawgithub'], $contents)) $matches[] = 'rawgithub';
                if (preg_match($patterns['eval_curl'], $contents)) $matches[] = 'eval_curl';
                if (preg_match($patterns['suspicious_functions'], $contents)) $matches[] = 'suspicious_functions';
            }
        }

        if (!empty($matches)) {
            $results[] = [
                'path' => $path,
                'matches' => array_values(array_unique($matches)),
                'size' => $fileinfo->getSize(),
                'perm' => $perm === false ? null : ($perm & 0777),
                'mtime' => $fileinfo->getMTime(),
                'owner' => ownerName($path),
            ];
        }
    }
    return $results;
}

############################
# If quarantine action submitted
############################
$messages = [];
if ($action === 'quarantine' && isset($_POST['selected']) && is_array($_POST['selected'])) {
    $selected = $_POST['selected'];
    // create quarantine dir
    $qbase = '/root/quarantine_colony_' . date('Ymd_His');
    if (!is_writable(dirname($qbase))) {
        // fallback to sys temp
        $qbase = sys_get_temp_dir() . '/quarantine_colony_' . date('Ymd_His');
    }
    if (!file_exists($qbase)) @mkdir($qbase, 0700, true);
    foreach ($selected as $p) {
        $p = trim($p);
        if (!file_exists($p)) {
            $messages[] = "Not found: " . h($p);
            continue;
        }
        // compute target path
        $rel = ltrim(str_replace($root, '', $p), '/\\');
        $targetDir = $qbase . '/' . dirname($rel);
        @mkdir($targetDir, 0700, true);
        $targetPath = $targetDir . '/' . basename($p);
        if (@rename($p, $targetPath)) {
            $messages[] = "Moved: " . h($p) . " -> " . h($targetPath);
        } else {
            // try copy+unlink
            if (@copy($p, $targetPath)) {
                @unlink($p);
                $messages[] = "Copied & removed: " . h($p) . " -> " . h($targetPath);
            } else {
                $messages[] = "Failed to move: " . h($p);
            }
        }
    }
    $messages[] = "Quarantine dir: " . h($qbase);
}

############################
# Perform scan
############################
$scanResults = scanDirectory($root, $patterns, $MAX_READ_BYTES);

############################
# CSV export support
############################
if ($action === 'download_csv') {
    header('Content-Type: text/csv');
    header('Content-Disposition: attachment; filename="scan_results_'.date('Ymd_His').'.csv"');
    $out = fopen('php://output','w');
    fputcsv($out, ['path','matches','size','perm','mtime','owner']);
    if (is_array($scanResults)) {
        foreach ($scanResults as $r) {
            fputcsv($out, [$r['path'], implode('|',$r['matches']), $r['size'], fmtPerm($r['perm']), date('c', $r['mtime']), $r['owner']]);
        }
    }
    fclose($out);
    exit;
}

############################
# HTML output
############################
?>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Backdoor Detector - Scan Results</title>
<style>
body{font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial; margin:18px; color:#111}
h1{font-size:18px}
table{border-collapse:collapse;width:100%;margin-top:12px}
th,td{padding:8px;border:1px solid #ddd;text-align:left;font-size:13px}
th{background:#f7f7f7}
.bad{background:#ffdede}
.good{background:#dff0d8}
.small{font-size:12px;color:#555}
.controls{margin-top:12px;margin-bottom:18px}
.msg{padding:8px;margin:8px 0;border-radius:4px;background:#f3f3f3}
</style>
</head>
<body>
<h1>Backdoor Detector / Scanner</h1>
<p class="small">Root path: <strong><?php echo h($root); ?></strong></p>

<div class="controls">
  <form method="get" style="display:inline-block;margin-right:12px">
    <input type="hidden" name="action" value="scan">
    <label>Root: <input type="text" name="root" value="<?php echo h($root); ?>" size="60"></label>
    <button type="submit">Scan</button>
  </form>

  <form method="get" style="display:inline-block">
    <input type="hidden" name="action" value="download_csv">
    <input type="hidden" name="root" value="<?php echo h($root); ?>">
    <button type="submit">Download CSV</button>
  </form>

  <form method="post" style="display:inline-block;float:right">
    <input type="hidden" name="action" value="quarantine">
    <input type="hidden" name="root" value="<?php echo h($root); ?>">
    <button type="submit" onclick="return confirm('Move selected files to quarantine? Make sure you have selected items.');">Quarantine selected</button>
  </form>
</div>

<?php if (!empty($messages)): ?>
  <div class="msg">
    <strong>Actions:</strong><br>
    <?php foreach($messages as $m) echo h($m) . "<br>"; ?>
  </div>
<?php endif; ?>

<?php if (!is_array($scanResults)): ?>
  <div class="msg">Error: <?php echo h(json_encode($scanResults)); ?></div>
<?php else: ?>
  <form method="post" id="qform">
    <input type="hidden" name="action" value="quarantine">
    <input type="hidden" name="root" value="<?php echo h($root); ?>">

    <table>
      <thead>
        <tr>
          <th style="width:28px"><input type="checkbox" id="chkall" onchange="toggleAll(this)"></th>
          <th>Path</th>
          <th style="width:220px">Indicators</th>
          <th style="width:100px">Perm</th>
          <th style="width:120px">Owner</th>
          <th style="width:160px">Mtime</th>
        </tr>
      </thead>
      <tbody>
<?php
if (count($scanResults) === 0) {
    echo '<tr><td colspan="6" class="small">No suspicious files found.</td></tr>';
} else {
    foreach ($scanResults as $r) {
        $c = in_array('numeric_php', $r['matches']) ? 'bad' : '';
        echo '<tr class="'.h($c).'">';
        echo '<td><input type="checkbox" name="selected[]" value="'.h($r['path']).'"></td>';
        echo '<td><code>'.h($r['path']).'</code></td>';
        echo '<td><span class="small">'.h(implode(', ', $r['matches'])).'</span></td>';
        echo '<td class="small">'.h(fmtPerm($r['perm'])).'</td>';
        echo '<td class="small">'.h($r['owner']).'</td>';
        echo '<td class="small">'.h(date('Y-m-d H:i:s', $r['mtime'])).'</td>';
        echo '</tr>';
    }
}
?>
      </tbody>
    </table>
    <div style="margin-top:12px">
      <button type="submit" onclick="return confirm('Move selected files to quarantine?');">Quarantine selected</button>
    </div>
  </form>
<?php endif; ?>

<p class="small" style="margin-top:18px">
  <strong>Notes:</strong> Scanning reads files (up to <?php echo $MAX_READ_BYTES; ?> bytes). For safety, quarantine will move files to a directory on the server; it does not delete permanently. After quarantine, inspect files in the quarantine directory before deletion. Remove this script from server after use.
</p>

<script>
function toggleAll(cb){
  var inputs = document.querySelectorAll('input[name="selected[]"]');
  for(var i=0;i<inputs.length;i++) inputs[i].checked = cb.checked;
}
</script>
</body>
</html>
